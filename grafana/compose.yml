configs:
  grafana_config:
    file: ./grafana
  loki_config:
    file: loki/local-config.yml
  prometheus_config:
    file: prometheus/prometheus.yml
  alertmanager_config:
    file: ./alertmanager

x-logging:
  &default-logging
    driver: loki
    options:
      loki-url: http://localhost:3100/loki/api/v1/push
      loki-external-labels: job=docker,container={{.Name}},environment=development
      loki-retries: 5
      loki-max-backoff: 800ms
      loki-timeout: 1s
      keep-file: 'true'

services:

  grafana:
    container_name: grafana
    image: grafana/grafana-oss:${GRAFANA_VERSION}
    deploy:
      resources:
        limits:
          memory: 100M
    restart: unless-stopped
    configs:
      - source: grafana_config
        target: /etc/grafana
    depends_on:
      - prometheus
    volumes:
      - ./data/grafana:/var/lib/grafana
    #ports:
    #  - ${GRAFANA_PORT}:3000
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_SECURITY_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false

  prometheus:
    container_name: prometheus
    image: prom/prometheus:${PROMETHEUS_VERSION}
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.external-url=/prometheus/'
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
    volumes:
      - ./data/prometheus:/prometheus
    ports:
      - ${PROMETHEUS_PORT}:9090
    restart: unless-stopped
    logging: *default-logging

# Loki
# Loki est un produit de GrafanaLabs. C'est un système d'agrégation de journaux conçu
# pour stocker et interroger les journaux (logs) de toutes vos infrastructures et applications.
  loki:
    container_name: loki
    image: grafana/loki:${LOKI_VERSION}
    command: -config.file=/etc/loki/local-config.yaml
    depends_on:
      - minio
    configs:
      - source: loki_config
        target: /etc/loki/local-config.yaml
    ports:
      - ${LOKI_PORT}:3100
      - 9095:9095
    volumes:
      - ./data/loki:/loki
    logging: *default-logging

# Minio
# MinIO is a high-performance, S3 compatible object store. It is built for large scale AI/ML,
# data lake and database workloads. It is software-defined and runs on any cloud or on-premises infrastructure.

  minio:
    container_name: minio
    image: minio/minio
    command: server --console-address ":9001" /data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_DEFAULT_BUCKETS: loki
      MINIO_BROWSER_LOGIN_ANIMATION: off
      MINIO_PROMETHEUS_AUTH_TYPE: public
      MINIO_PROMETHEUS_URL: http://prometheus:9090
      MINIO_PROMETHEUS_JOB_ID: minio
    volumes:
      - ./data/minio:/data
    ports:
      - 9000:9000
      - 9001:9001
    #healthcheck:
    #  test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
    #  interval: 15s
    #  timeout: 20s
    #  retries: 5
    logging: *default-logging

  # Create a service that only creates a default bucket.
  # /usr/bin/mc policy set download minio1/loki;
  # /usr/bin/mc admin update minio1 --yes;
  minio_init:
    container_name: minio_init
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add minio1 http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc rm -r --force minio1/loki;
      /usr/bin/mc mb minio1/loki;
      /usr/bin/mc policy set public minio1/loki;
      /usr/bin/mc admin prometheus generate minio1 bucket --public;
      /usr/bin/mc admin info minio1;
      exit 0;
      "

  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager:${ALERTMANAGER_VERSION}
    command: --config.file=/etc/alertmanager/alertmanager.yml --log.level=debug
    ports:
      - ${ALERTMANAGER_PORT}:9093
    configs:
      - source: alertmanager_config
        target: /etc/alertmanager
    volumes:
      - ./data/alertmanager:/alertmanager

  fakelog:
    container_name: fake_logs
    image: mingrammer/flog
    command:
      - --loop
      - --format=rfc3164
      - --number=1
      - --delay=5s
      - --overwrite
      - --type=stdout
    logging: *default-logging

# based on
# https://github.com/docker/awesome-compose/tree/master/prometheus-grafana
# https://github.com/stefanprodan/dockprom
# https://yoandev.co/superviser-ses-conteneurs-docker-avec-prometheus/grafana-et-stressons-la-solution-avec-une-api-symfony-et-postman/
# https://hackernoon.com/fr/comment-d%C3%A9ployer-grafana-loki-et-enregistrer-des-donn%C3%A9es-sur-minio-%C3%A0-l'aide-de-conteneurs-docker-ou-directement-depuis-la-source
# https://blog.min.io/how-to-grafana-loki-minio/
# https://github.com/cniackz/loki?ref=blog.min.io
