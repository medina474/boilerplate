configs:
  mariadb_initdb:
    file: ./mariadb/docker-entrypoint-initdb.d
  prometheus_config:
    file: ./prometheus/prometheus.yml
  grafana_config:
    file: ./grafana

volumes:
  prometheus: {}

services:

# MariaDB Server
# One of the most popular open source relational databases
# https://mariadb.org/

  mariadb:
    container_name: r5a10-mariadb
    build:
      context: ./mariadb
    restart: no
    configs:
      - source: mariadb_initdb
        target: /docker-entrypoint-initdb.d
    volumes:
      - ./data/mariadb:/var/lib/mysql
    ports:
      - 3306:${MARIADB_PORT:-3306}
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3
    environment:
      MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
      MARIADB_USER: ${MARIADB_USER}
      MARIADB_PASSWORD: ${MARIADB_PASSWORD}

# Redis
# In-memory key-value database
# https://redis.io/fr/

  redis:
    container_name: r5a10-redis
    image: redis:${REDIS_VERSION:-7.2.5}
    restart: no
    command:
      - 'redis-server'
      - '--save 60 1'
      - '--loglevel warning'
      - '--requirepass ${REDIS_PASSWORD}'
    volumes:
      - ./data/redis:/data

# NocoDB
# Instantly turn your Database into a No-Code Platform.
# https://nocodb.com/

  nocodb:
    container_name: r5a10-nocodb
    image: nocodb/nocodb:${NOCODB_VERSION:-0.251.3}
    ports:
      - 8080:8080
    depends_on:
      mariadb:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      NC_DB: ${NOCODB_DB_CLIENT}://${NOCODB_DB_HOST}?u=${NOCODB_DB_USER:-nocodb}&p=${NOCODB_DB_PASSWORD}&d=${NOCODB_DB_DATABASE:-nocodb}
      NC_ADMIN_EMAIL: ${ADMIN_EMAIL}
      NC_ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      NC_REDIS_URL: redis://:${REDIS_PASSWORD}@${REDIS_HOST:-redis}

# Directus
# The backend to build anything or everything.
# https://directus.io/

  directus:
    container_name: r5a10-directus
    image: directus/directus:${DIRECTUS_VERSION:-11.0.0-rc.3}
    volumes:
      - ./data/directus/uploads:/directus/uploads
      - ./data/directus/extensions:/directus/extensions
    ports:
      - 8081:${DIRECTUS_PORT:-8081}
    depends_on:
      mariadb:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      KEY: ${DIRECTUS_KEY}
      SECRET: ${DIRECTUS_SECRET}
      PUBLIC_URL: http://127.0.0.1:8081/
      PORT: ${DIRECTUS_PORT:-8081}

      DB_CLIENT: ${DIRECTUS_DB_CLIENT}
      DB_HOST: ${DIRECTUS_DB_HOST}
      DB_PORT: ${DIRECTUS_DB_PORT}
      DB_DATABASE: ${DIRECTUS_DB_DATABASE:-directus}
      DB_USER: ${DIRECTUS_DB_USER:-directus}
      DB_PASSWORD: ${DIRECTUS_DB_PASSWORD}

      CACHE_ENABLED: true
      CACHE_AUTO_PURGE: true
      CACHE_STORE: redis
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}

      EMAIL_FROM: directus@univ-lorraine.fr
      EMAIL_TRANSPORT: smtp
      EMAIL_SMTP_HOST: ${DIRECTUS_SMTP_HOST:-inbucket}
      EMAIL_SMTP_PORT: ${DIRECTUS_SMTP_PORT:-2500}

# Inbucket
# Email testing application; 
# it will accept messages for any email address and make them available to view via a web interface. 
# https://inbucket.org/
  inbucket:
    container_name: r5a10-inbucket
    image: inbucket/inbucket:${INBUCKET_VERSION:-3.0.3}
    ports:
      - '2500:2500' # SMTP
      - '1100:1100' # POP3
      - '8082:9000' # web interface

# Prometheus
# Monitoring system & time series database
# https://prometheus.io/
  prometheus:
    container_name: r5a10-prometheus
    image: prom/prometheus:${PROMETHEUS_VERSION:-v2.53.0}
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
    volumes:
      - prometheus:/prometheus
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - 9090:9090
    extra_hosts:
      - host.docker.internal=host-gateway
#/etc/docker/daemon.json
#{
#  "metrics-addr": "0.0.0.0:9323"
#}

# Grafana
# Open source analytics & monitoring solution for every database.
#
  grafana:
    container_name: r5a10-grafana
    image: grafana/grafana-oss:${GRAFANA_VERSION:-11.1.3}
    deploy:
      resources:
        limits:
          memory: 100M
    configs:
      - source: grafana_config
        target: /etc/grafana
    volumes:
      - ./data/grafana:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_FEATURE_TOGGLES_ENABLE: traceQLStreaming metricsSummary lokiFormatQuery alertmanagerRemoteOnly
