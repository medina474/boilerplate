networks:
  boilerplate_network:
    external: true

configs:
  postgresql_initdb:
    file: ./initdb.d
  pgadmin_config:
    file: ./pgadmin-servers.json

services:

  postgresql:
    image: boilerplate/postgresql:${POSTGRES_VERSION}
    container_name: postgresql
    build:
      context: .
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 5432:5432
    networks:
      - boilerplate_network
    configs:
      - source: postgresql_initdb
        target: /docker-entrypoint-initdb.d/
    volumes:
      - ./data/postgresql/:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d ${POSTGRES_DB}'"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

  postgres-metrics-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: prometheus-exporter
    depends_on:
      - postgresql
    networks:
      - boilerplate_network
    ports:
      - 9187:9187
    environment:
      DATA_SOURCE_NAME: postgresql://postgres:supermotdepasse@postgresql:5432/postgres?sslmode=disable

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:${PGADMIN_VERSION:-8.4}
    depends_on:
      - postgresql
    restart: no
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_DISABLE_POSTFIX: true
      SCRIPT_NAME: /pgadmin
    configs:
      - source: pgadmin_config
        target: /pgadmin4/servers.json
    volumes:
      - ./data/pgadmin/:/var/lib/pgadmin/
    networks:
      - boilerplate_network
    labels:
      traefik.enable: true
      traefik.http.routers.pgadmin.entrypoints: websecure
      traefik.http.routers.pgadmin.tls: true
      traefik.http.routers.pgadmin.rule: ${PGADMIN_TRAEFIK_RULE}
      traefik.http.services.pgadmin.loadbalancer.server.port: 80

  postgrest:
    container_name: postgrest
    image: postgrest/postgrest:${POSTGREST_VERSION:-v12.0.1}
    depends_on:
      - postgresql
    environment:
      PGRST_DB_URI: postgres://${POSTGREST_USER}:${POSTGREST_PASSWORD}@${POSTGREST_HOST}:${POSTGREST_DB_PORT:-5432}/${POSTGREST_DB}
      PGRST_DB_SCHEMAS: ${POSTGREST_DB_SCHEMAS:-public}
      PGRST_DB_ANON_ROLE: ${POSTGREST_DB_ANON_ROLE:-anon}
      PGRST_JWT_SECRET: ${POSTGREST_JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: ${POSTGREST_DB_USE_LEGACY_GUCS:-false}
      PGRST_APP_SETTINGS_JWT_SECRET: ${POSTGREST_APP_SETTINGS_JWT_SECRET}
      PGRST_APP_SETTINGS_JWT_EXP: ${POSTGREST_APP_SETTINGS_JWT_EXP}
    command: postgrest
    networks:
      - boilerplate_network
    labels:
      traefik.enable: true
      traefik.http.routers.postgrest.entrypoints: websecure
      traefik.http.routers.postgrest.tls: true
      traefik.http.routers.postgrest.rule: ${POSTGREST_TRAEFIK_RULE}
      traefik.http.services.postgrest.loadbalancer.server.port: ${POSTGREST_PORT}
      traefik.http.routers.postgrest.middlewares: strip-prefix

  redocly:
    container_name: redocly
    image: redocly/redoc
    depends_on:
      - postgrest
    networks:
      - boilerplate_network
    environment:
      SPEC_URL: https://boilerplate.docker.org/postgrest
      BASE_PATH: redocly/
    labels:
      traefik.enable: true
      traefik.http.routers.redocly.entrypoints: websecure
      traefik.http.routers.redocly.tls: true
      traefik.http.routers.redocly.rule: ${REDOCLY_TRAEFIK_RULE}
      traefik.http.services.redocly.loadbalancer.server.port: ${REDOCLY_PORT:-80}
      traefik.http.routers.redocly.middlewares: strip-prefix

  postgraphile:
    image: boilerplate/postgraphile:2024.04
    container_name: postgraphile
    build:
      context: ./postgraphile
    depends_on:
      - postgresql
    environment:
      - PGHOST=${POSTGRAPHILE_HOST}
      - PGPORT=${POSTGRAPHILE_DB_PORT:-5432}
      - PGDATABASE=${POSTGRAPHILE_DATABASE}
      - PGUSER=${POSTGRAPHILE_USER}
      - PGPASSWORD=${POSTGRAPHILE_PASSWORD}
    networks:
      - boilerplate_network
    command:
      [
        "--port", "${POSTGRAPHILE_PORT:-5000}",
        "--schema", "${POSTGRAPHILE_SCHEMA}",
        "--enhance-graphiql",
        "--cors",
        "--allow-explain",
        "--dynamic-json",
        "--append-plugins",
        "postgraphile-plugin-connection-filter,postgraphile-plugin-fulltext-filter,@graphile/postgis,postgraphile-plugin-connection-filter-postgis"
      ]
    labels:
      traefik.enable: true
      traefik.http.routers.postgraphile.entrypoints: websecure
      traefik.http.routers.postgraphile.tls: true
      traefik.http.routers.postgraphile.rule: ${POSTGRAPHILE_TRAEFIK_RULE}
      traefik.http.services.postgraphile.loadbalancer.server.port: ${POSTGRAPHILE_PORT}
      traefik.http.routers.postgraphile.middlewares: strip-prefix

  age_viewer:
    image: boilerplate/age_viewer:2024.04
    container_name: age_viewer
    depends_on:
      - postgresql
    tty: true
    build:
      context: ./age-viewer
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    command: npm run start
 #https://dev.to/munmud/how-to-run-apache-age-and-age-viewer-using-docker-207f
